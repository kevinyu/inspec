import numpy as np
from numpy.typing import NDArray

_XTERM_COLORS_AS_RGB = np.array(
    [
        [0, 0, 0],
        [128, 0, 0],
        [0, 128, 0],
        [128, 128, 0],
        [0, 0, 128],
        [128, 0, 128],
        [0, 128, 128],
        [192, 192, 192],
        [128, 128, 128],
        [255, 0, 0],
        [0, 255, 0],
        [255, 255, 0],
        [0, 0, 255],
        [255, 0, 255],
        [0, 255, 255],
        [255, 255, 255],
        [0, 0, 0],
        [0, 0, 95],
        [0, 0, 135],
        [0, 0, 175],
        [0, 0, 215],
        [0, 0, 255],
        [0, 95, 0],
        [0, 95, 95],
        [0, 95, 135],
        [0, 95, 175],
        [0, 95, 215],
        [0, 95, 255],
        [0, 135, 0],
        [0, 135, 95],
        [0, 135, 135],
        [0, 135, 175],
        [0, 135, 215],
        [0, 135, 255],
        [0, 175, 0],
        [0, 175, 95],
        [0, 175, 135],
        [0, 175, 175],
        [0, 175, 215],
        [0, 175, 255],
        [0, 215, 0],
        [0, 215, 95],
        [0, 215, 135],
        [0, 215, 175],
        [0, 215, 215],
        [0, 215, 255],
        [0, 255, 0],
        [0, 255, 95],
        [0, 255, 135],
        [0, 255, 175],
        [0, 255, 215],
        [0, 255, 255],
        [95, 0, 0],
        [95, 0, 95],
        [95, 0, 135],
        [95, 0, 175],
        [95, 0, 215],
        [95, 0, 255],
        [95, 95, 0],
        [95, 95, 95],
        [95, 95, 135],
        [95, 95, 175],
        [95, 95, 215],
        [95, 95, 255],
        [95, 135, 0],
        [95, 135, 95],
        [95, 135, 135],
        [95, 135, 175],
        [95, 135, 215],
        [95, 135, 255],
        [95, 175, 0],
        [95, 175, 95],
        [95, 175, 135],
        [95, 175, 175],
        [95, 175, 215],
        [95, 175, 255],
        [95, 215, 0],
        [95, 215, 95],
        [95, 215, 135],
        [95, 215, 175],
        [95, 215, 215],
        [95, 215, 255],
        [95, 255, 0],
        [95, 255, 95],
        [95, 255, 135],
        [95, 255, 175],
        [95, 255, 215],
        [95, 255, 255],
        [135, 0, 0],
        [135, 0, 95],
        [135, 0, 135],
        [135, 0, 175],
        [135, 0, 215],
        [135, 0, 255],
        [135, 95, 0],
        [135, 95, 95],
        [135, 95, 135],
        [135, 95, 175],
        [135, 95, 215],
        [135, 95, 255],
        [135, 135, 0],
        [135, 135, 95],
        [135, 135, 135],
        [135, 135, 175],
        [135, 135, 215],
        [135, 135, 255],
        [135, 175, 0],
        [135, 175, 95],
        [135, 175, 135],
        [135, 175, 175],
        [135, 175, 215],
        [135, 175, 255],
        [135, 215, 0],
        [135, 215, 95],
        [135, 215, 135],
        [135, 215, 175],
        [135, 215, 215],
        [135, 215, 255],
        [135, 255, 0],
        [135, 255, 95],
        [135, 255, 135],
        [135, 255, 175],
        [135, 255, 215],
        [135, 255, 255],
        [175, 0, 0],
        [175, 0, 95],
        [175, 0, 135],
        [175, 0, 175],
        [175, 0, 215],
        [175, 0, 255],
        [175, 95, 0],
        [175, 95, 95],
        [175, 95, 135],
        [175, 95, 175],
        [175, 95, 215],
        [175, 95, 255],
        [175, 135, 0],
        [175, 135, 95],
        [175, 135, 135],
        [175, 135, 175],
        [175, 135, 215],
        [175, 135, 255],
        [175, 175, 0],
        [175, 175, 95],
        [175, 175, 135],
        [175, 175, 175],
        [175, 175, 215],
        [175, 175, 255],
        [175, 215, 0],
        [175, 215, 95],
        [175, 215, 135],
        [175, 215, 175],
        [175, 215, 215],
        [175, 215, 255],
        [175, 255, 0],
        [175, 255, 95],
        [175, 255, 135],
        [175, 255, 175],
        [175, 255, 215],
        [175, 255, 255],
        [215, 0, 0],
        [215, 0, 95],
        [215, 0, 135],
        [215, 0, 175],
        [215, 0, 215],
        [215, 0, 255],
        [215, 95, 0],
        [215, 95, 95],
        [215, 95, 135],
        [215, 95, 175],
        [215, 95, 215],
        [215, 95, 255],
        [215, 135, 0],
        [215, 135, 95],
        [215, 135, 135],
        [215, 135, 175],
        [215, 135, 215],
        [215, 135, 255],
        [215, 175, 0],
        [215, 175, 95],
        [215, 175, 135],
        [215, 175, 175],
        [215, 175, 215],
        [215, 175, 255],
        [215, 215, 0],
        [215, 215, 95],
        [215, 215, 135],
        [215, 215, 175],
        [215, 215, 215],
        [215, 215, 255],
        [215, 255, 0],
        [215, 255, 95],
        [215, 255, 135],
        [215, 255, 175],
        [215, 255, 215],
        [215, 255, 255],
        [255, 0, 0],
        [255, 0, 95],
        [255, 0, 135],
        [255, 0, 175],
        [255, 0, 215],
        [255, 0, 255],
        [255, 95, 0],
        [255, 95, 95],
        [255, 95, 135],
        [255, 95, 175],
        [255, 95, 215],
        [255, 95, 255],
        [255, 135, 0],
        [255, 135, 95],
        [255, 135, 135],
        [255, 135, 175],
        [255, 135, 215],
        [255, 135, 255],
        [255, 175, 0],
        [255, 175, 95],
        [255, 175, 135],
        [255, 175, 175],
        [255, 175, 215],
        [255, 175, 255],
        [255, 215, 0],
        [255, 215, 95],
        [255, 215, 135],
        [255, 215, 175],
        [255, 215, 215],
        [255, 215, 255],
        [255, 255, 0],
        [255, 255, 95],
        [255, 255, 135],
        [255, 255, 175],
        [255, 255, 215],
        [255, 255, 255],
        [8, 8, 8],
        [18, 18, 18],
        [28, 28, 28],
        [38, 38, 38],
        [48, 48, 48],
        [58, 58, 58],
        [68, 68, 68],
        [78, 78, 78],
        [88, 88, 88],
        [96, 96, 96],
        [102, 102, 102],
        [118, 118, 118],
        [128, 128, 128],
        [138, 138, 138],
        [148, 148, 148],
        [158, 158, 158],
        [168, 168, 168],
        [178, 178, 178],
        [188, 188, 188],
        [198, 198, 198],
        [208, 208, 208],
        [218, 218, 218],
        [228, 228, 228],
        [238, 238, 238],
    ]
)


def to_xterm_arr(arr: NDArray) -> NDArray:
    """
    Convert an array of RGB values to xterm-256color values

    Input: (n, m, 3)
        Each value is an integer between 0 and 255, representing an RGB value
    Output: (n, m)
        Each value is an integer between 0 and 255, representing an xterm color
    """
    assert arr.ndim == 3
    assert arr.shape[-1] == 3
    response: NDArray = np.argmin(
        np.linalg.norm(arr - _XTERM_COLORS_AS_RGB, axis=2), axis=1
    )
    assert response.shape == arr.shape[:-1]
    return response


def to_xterm(r: int, g: int, b: int) -> int:
    """
    Convert a single RGB value to xterm-256color value
    """
    return int(np.argmin(np.linalg.norm([r, g, b] - _XTERM_COLORS_AS_RGB, axis=1)))
